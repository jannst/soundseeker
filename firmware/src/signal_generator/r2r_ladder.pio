.program r2r_ladder

.wrap_target
    out pins, 6         ; output 6 bits to the R2R-ladder 
.wrap

% c-sdk {
static inline void r2r_ladder_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, uint num_samples, float freq) {
    pio_sm_config c = r2r_ladder_program_get_default_config(offset);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin_base, pin_count);

    // enable autopull
    sm_config_set_out_shift(&c, true, true, 6);

    // make TX FIFO twice as big
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);


    // Set this pin's GPIO function (connect PIO to the pad)
    for(uint8_t i = 0; i < pin_count; i++) {
        pio_gpio_init(pio, pin_base + i);
    }

    // set clock divider to match requested frequency
    float div = clock_get_hz(clk_sys) / num_samples / freq;
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
